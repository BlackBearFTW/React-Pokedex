{"version":3,"sources":["components/Autocomplete.js","utils/FormattingUtil.js","App.js","service/PokemonService.js","index.js"],"names":["Autocomplete","options","limit","placeholder","callback","useState","suggestions","setSuggestions","inputValue","setInputValue","className","type","onChange","event","target","value","items","filter","op","name","startsWith","toLowerCase","slice","map","suggestion","onClick","id","FormattingUtil","string","charAt","toUpperCase","number","Math","round","Number","EPSILON","pokemonService","a","axios","get","response","data","results","item","pokemon","url","replace","types","push","capitalize","img","sprites","other","front_default","height","roundOff","weight","stats","hp","base_stat","attack","defense","special_attack","special_defense","speed","fac","FastAverageColor","App","pokemonList","setPokemonList","pokemonInformation","setPokemonInformation","useEffect","getAllNames","then","result","updateScreen","getPokemonByName","pokemonInfo","fallback","changeBackground","imgUrl","dynamicBackground","document","querySelector","color","getColorAsync","fullColor","hex","style","backgroundColor","src","alt","title","gridColumnStart","replaceAll","toString","padStart","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3d2f54e8.chunk.js","sourcesContent":["import {useState} from \"react\";\r\n\r\nfunction Autocomplete({options, limit, placeholder = \"\", callback}) {\r\n    const [suggestions, setSuggestions] = useState([]);\r\n    const [inputValue, setInputValue] = useState(\"\");\r\n\r\n    function handleChange(event) {\r\n        setInputValue(event.target.value);\r\n\r\n        if (event.target.value === \"\") return setSuggestions([]);\r\n\r\n        const items = options.filter(op => {\r\n            return op.name.startsWith(event.target.value.toLowerCase());\r\n        })\r\n\r\n        setSuggestions(items.slice(0, limit));\r\n    }\r\n\r\n\r\n\r\n    function handleClick(name, id) {\r\n\r\n        setInputValue(name);\r\n        setSuggestions([]);\r\n\r\n        callback(id);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"AutoSuggest\">\r\n            <input type=\"text\" onChange={handleChange} placeholder={placeholder} value={inputValue}/>\r\n            <ul className=\"suggestions\">\r\n                {suggestions.map(suggestion => (\r\n                    <li key={suggestion.id} onClick={() => handleClick(suggestion.name, suggestion.id)}>\r\n                        {suggestion.name}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Autocomplete;\r\n","class FormattingUtil {\r\n    static capitalize(string) {\r\n        return string.charAt(0).toUpperCase() + string.slice(1)\r\n    }\r\n\r\n    static roundOff(number) {\r\n        return Math.round((number  + Number.EPSILON) * 100) / 100\r\n    }\r\n}\r\n\r\nexport default FormattingUtil;","import './App.css';\r\nimport {useEffect, useState} from \"react\";\r\nimport Autocomplete from \"./components/Autocomplete\";\r\nimport FastAverageColor from 'fast-average-color';\r\nimport PokemonService from \"./service/PokemonService\";\r\n\r\nconst pokemonService = new PokemonService();\r\n\r\nconst fac = new FastAverageColor();\r\n\r\nfunction App() {\r\n    const [pokemonList, setPokemonList] = useState([]);\r\n    const [pokemonInformation, setPokemonInformation] = useState(\"\");\r\n\r\n    /*eslint-disable*/\r\n    useEffect(() => {\r\n        pokemonService.getAllNames().then(result => setPokemonList(result));\r\n        updateScreen(\"bulbasaur\")\r\n    }, []);\r\n    /*eslint-enable*/\r\n\r\n\r\n    const updateScreen = (pokemon) => {\r\n\r\n        if (pokemon < 1 || pokemon > 898) return;\r\n\r\n\r\n        pokemonService.getPokemonByName(pokemon).then(pokemonInfo => {\r\n            let fallback = false;\r\n\r\n            if(pokemonInfo.img === null) {\r\n                pokemonInfo.img = \"./fallback.png\";\r\n                fallback = true;\r\n            }\r\n\r\n            changeBackground(pokemonInfo.img, fallback).then();\r\n            setPokemonInformation(pokemonInfo);\r\n\r\n        });\r\n    }\r\n\r\n    const changeBackground = async (imgUrl, fallback = false) => {\r\n        const dynamicBackground = document.querySelector(\".image-column\");\r\n        let color;\r\n\r\n        if (fallback) {\r\n            color = \"#4a4a4a\";\r\n        } else {\r\n            const fullColor = await fac.getColorAsync(imgUrl);\r\n            color = fullColor.hex;\r\n        }\r\n\r\n        dynamicBackground.style.backgroundColor = color;\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {/* Left column */}\r\n            <div className=\"col image-column\">\r\n                <div>{/* Placeholder */}</div>\r\n                <div className=\"img-row\">\r\n                    <button className=\"btn\" onClick={() => updateScreen(pokemonInformation.id - 1)}>-</button>\r\n                    <img src={pokemonInformation.img} alt=\"\"/>\r\n                    <button className=\"btn\" onClick={() => updateScreen(pokemonInformation.id + 1)}>+</button>\r\n                </div>\r\n                {pokemonInformation && (\r\n                <div className=\"type-icon-parent\">\r\n                    {pokemonInformation.types.map(type => (\r\n                        <img src={`./types/${type}.png`} alt=\"\" className=\"type-icon\" title={type}/>\r\n                    ))}\r\n                </div>\r\n                )}\r\n            </div>\r\n            {/* Right column */}\r\n            <div className=\"col information-column\">\r\n                <div>\r\n                    <div className=\"navbar\">\r\n                        <img src={\"./Pokédex_logo.png\"} className=\"logo\" alt=\"\"/>\r\n                        <Autocomplete options={pokemonList} limit=\"10\" placeholder=\"Search Pokémon\"\r\n                                      callback={updateScreen}/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"stats\">\r\n                    {pokemonInformation && (\r\n                        <>\r\n                            <div style={{gridColumnStart: \"span 2\"}}>\r\n                                <div className=\"pokemon-name\">\r\n                                    {pokemonInformation.name.replaceAll(\"-\", \"‑\")}\r\n                                </div>\r\n                                <div className=\"pokemon-id\">#{pokemonInformation.id.toString().padStart(3, '0')}</div>\r\n                            </div>\r\n                            <div>\r\n                                <span>{pokemonInformation.stats.hp}</span>\r\n                                <span>HP</span>\r\n                            </div>\r\n                            <div>\r\n                                <span>{pokemonInformation.stats.speed}</span>\r\n                                <span>Speed</span>\r\n                            </div>\r\n                            <div>\r\n                                <span>{pokemonInformation.stats.attack}</span>\r\n                                <span>Attack</span>\r\n                            </div>\r\n                            <div>\r\n                                <span>{pokemonInformation.stats.defense}</span>\r\n                                <span>Defense</span>\r\n                            </div>\r\n                            <div>\r\n                                <span>{pokemonInformation.stats.special_attack}</span>\r\n                                <span>Sp. Attack</span>\r\n                            </div>\r\n                            <div>\r\n                                <span>{pokemonInformation.stats.special_defense}</span>\r\n                                <span>Sp. Defense</span>\r\n                            </div>\r\n                            <div className=\"other-stats\">\r\n                                Height: {pokemonInformation.height}M Weight: {pokemonInformation.weight}Kg\r\n                            </div>\r\n                        </>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n\r\nexport default App;\r\n","import axios from \"axios\";\r\nimport FormattingUtil from \"../utils/FormattingUtil\";\r\n\r\nclass PokemonService {\r\n    async getAllNames() {\r\n        const response = await axios.get('https://pokeapi.co/api/v2/pokemon-species/?limit=20000');\r\n\r\n        return response.data.results.map(item => {\r\n            const pokemon = {};\r\n\r\n            pokemon.name = item.name;\r\n            pokemon.id = item.url.replace(\"https://pokeapi.co/api/v2/pokemon-species/\", \"\").slice(0, -1);\r\n\r\n            return pokemon;\r\n        })\r\n\r\n    }\r\n\r\n    async getPokemonByName(name) {\r\n        const response = await axios.get(`https://pokeapi.co/api/v2/pokemon/${name}`);\r\n\r\n        let types = [];\r\n\r\n        for (let type of response.data.types) {\r\n            types.push(FormattingUtil.capitalize(type.type.name));\r\n        }\r\n\r\n        return {\r\n            id: response.data.id,\r\n            name: FormattingUtil.capitalize(response.data.name),\r\n            img: response.data.sprites.other[\"official-artwork\"].front_default,\r\n            height: FormattingUtil.roundOff(response.data.height * 0.1),\r\n            weight: FormattingUtil.roundOff(response.data.weight * 0.1),\r\n            stats: {\r\n                hp: response.data.stats[0].base_stat,\r\n                attack: response.data.stats[1].base_stat,\r\n                defense: response.data.stats[2].base_stat,\r\n                special_attack: response.data.stats[3].base_stat,\r\n                special_defense: response.data.stats[4].base_stat,\r\n                speed: response.data.stats[5].base_stat,\r\n            },\r\n            types: types\r\n        }\r\n    }\r\n}\r\n\r\nexport default PokemonService;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}